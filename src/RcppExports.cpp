// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// timesFive
NumericVector timesFive(NumericVector x);
RcppExport SEXP _microcancer_timesFive(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesFive(x));
    return rcpp_result_gen;
END_RCPP
}
// my_mvrnorm
NumericVector my_mvrnorm(NumericVector m, NumericMatrix s);
RcppExport SEXP _microcancer_my_mvrnorm(SEXP mSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(my_mvrnorm(m, s));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_microcancer_timesFive", (DL_FUNC) &_microcancer_timesFive, 1},
    {"_microcancer_my_mvrnorm", (DL_FUNC) &_microcancer_my_mvrnorm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_microcancer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
